{"version":3,"sources":["Features/filterSlice.js","Components/Filter.js","Components/Card.js","Page/Home.js","App.js","Store.js","index.js"],"names":["filterSlice","createSlice","name","initialState","filterTags","initialJobs","jobs","reducers","createJobsData","state","action","incomingJobsData","payload","console","log","addFilterTag","newTags","filteredJobs","includes","tag","jobsArray","JSON","parse","stringify","i","length","tags","push","removeFilterTag","eliminateTag","tagIndex","newTagsArray","splice","updatedArray","isPresent","j","removeAllFilterTags","actions","Filter","filters","useSelector","dispatch","useDispatch","className","map","filterTag","index","onClick","Card","element","featured","src","image","alt","companyName","new","jobPosition","posted","jobType","jobLocation","Real","useEffect","window","addEventListener","fetch","headers","then","res","json","data","App","Home","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.665c3573.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const filterSlice = createSlice({\r\n    name: \"filter\",\r\n    initialState: {\r\n        filterTags: [],\r\n        initialJobs: [],\r\n        jobs: []\r\n    },\r\n\r\n    reducers: {\r\n        createJobsData: (state, action) => {\r\n            let incomingJobsData = action.payload;\r\n            // Simulate incoming data from an API/server.\r\n            console.log(incomingJobsData);\r\n\r\n            return {\r\n                ...state,\r\n                initialJobs: incomingJobsData,\r\n                jobs: incomingJobsData\r\n            }\r\n        },\r\n\r\n        addFilterTag: (state, action) => {\r\n            let newTags = [];\r\n            let filteredJobs = [];\r\n\r\n            // Don't add duplicate tags.\r\n            if (state.filterTags.includes(action.payload.tag)) {\r\n                newTags = [...state.filterTags];\r\n            } else {\r\n                newTags = [...state.filterTags, action.payload.tag];\r\n            }\r\n\r\n\r\n\r\n            let jobsArray = JSON.parse(JSON.stringify(state.jobs));\r\n            for (let i = 0; i < jobsArray.length; i++) {\r\n                if (jobsArray[i].tags.includes(action.payload.tag)) {\r\n                    filteredJobs.push(jobsArray[i]);\r\n                }\r\n            }\r\n\r\n\r\n            return {\r\n                ...state,\r\n                filterTags: newTags,\r\n                jobs: filteredJobs\r\n            }\r\n        },\r\n\r\n\r\n        removeFilterTag: (state, action) => {\r\n            let eliminateTag = action.payload.tagIndex;\r\n            let newTagsArray = [...state.filterTags];\r\n            newTagsArray.splice(eliminateTag, 1);\r\n\r\n\r\n\r\n\r\n            \r\n            if (newTagsArray.length === 0) {\r\n                return {\r\n                    ...state,\r\n                    filterTags: [],\r\n                    jobs: state.initialJobs\r\n                }\r\n            } else {\r\n                let updatedArray = [];\r\n                let jobsArray = JSON.parse(JSON.stringify(state.initialJobs));\r\n                for (let i = 0; i < jobsArray.length; i++) {\r\n                    let isPresent = true;\r\n                    for (let j = 0; j < newTagsArray.length; j++) {\r\n                        if (!jobsArray[i].tags.includes(newTagsArray[j])) {\r\n                            isPresent = false;\r\n                        }\r\n                    }\r\n                    if (isPresent === true) {\r\n                        updatedArray.push(jobsArray[i]);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    filterTags: newTagsArray,\r\n                    jobs: updatedArray\r\n                }\r\n            }\r\n        },\r\n\r\n        removeAllFilterTags: (state) => {\r\n            return {\r\n                ...state,\r\n                filterTags: [],\r\n                jobs: state.initialJobs\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport const { createJobsData, addFilterTag, removeFilterTag, removeAllFilterTags } = filterSlice.actions;\r\n\r\nexport default filterSlice.reducer;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { removeFilterTag, removeAllFilterTags } from '../Features/filterSlice';\r\n\r\nfunction Filter() {\r\n    const filters = useSelector(state => state.filters.filterTags);\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTag = (tagIn) => {\r\n        dispatch(removeFilterTag({tagIndex: tagIn}));\r\n    };\r\n\r\n\r\n    const removeAllTags = () => {\r\n        dispatch(removeAllFilterTags());\r\n    };\r\n\r\n\r\n    return (\r\n            <div className=\"filter-container\">\r\n                <div className=\"filter-tags-container\">\r\n                    {filters.map((filterTag, index) => (\r\n                        <div key={index}>\r\n                            <p>{filterTag}</p>\r\n                            <button className=\"filter-btn\" onClick={() => removeTag(index)}>X</button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <button className=\"clear-btn\" onClick={removeAllTags}>Clear</button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addFilterTag } from '../Features/filterSlice';\r\n\r\nfunction Card() {\r\n    const jobs = useSelector(state => state.filters.jobs);\r\n    const dispatch = useDispatch();\r\n\r\n    const addNewFilterTag = (el) => {\r\n        dispatch(addFilterTag({tag: el}));\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n        jobs.map((element, index) => (\r\n            <div className={element.featured ? \"card-wrapper card-featured\" : \"card-wrapper\"} key={index}>\r\n                <img src={`./images/${element.image}`} alt=\"Company Logo\" className=\"company-logo\" />\r\n                <div className=\"info-container\">\r\n                    <div className=\"job-details-container\">\r\n                        <div className=\"company-info row-direction\">\r\n                            <p>{element.companyName}</p>\r\n                            {element.new ? (\r\n                                <button className=\"btn-new-job\">NEW!</button>\r\n                            ) : null}\r\n                            {element.featured ? (\r\n                                <button className=\"btn-featured-job\">FEATURED</button>\r\n                            ) : null}\r\n                        </div>\r\n                        <h1 className=\"job-position\">{element.jobPosition}</h1>\r\n                        <div className=\"job-info row-direction\">\r\n                            <p>{element.posted} ago</p>\r\n                            <p>{element.jobType}</p>\r\n                            <p>{element.jobLocation}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"tags-container\">\r\n                        {element.tags.map((element, index) => (\r\n                            <button key={index} onClick={() => addNewFilterTag(element)}>{element}</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { useEffect } from 'react';\r\nimport Filter from \"../Components/Filter\";\r\nimport Card from \"../Components/Card\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { createJobsData } from '../Features/filterSlice';\r\n\r\n\r\nfunction Real() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let getData = () => {\r\n            fetch(\"./data.json\",{\r\n                headers : { \r\n                    'Accept': 'application/json'\r\n                   }\r\n            })\r\n                .then(res => res.json())\r\n                    .then(data => dispatch(createJobsData(data.jobs)));\r\n        };\r\n\r\n        window.addEventListener(\"load\", getData);\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <main>\r\n                <Filter />\r\n                <Card />\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Real;","import './Reset.css';\nimport './Scss/style.css';\nimport Home from './Page/Home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport filterSlice from './Features/filterSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    filters: filterSlice\r\n  }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './Store';\nimport { Provider } from 'react-redux';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}